// Firestore Security Rules - TEMPORAL (App Check deshabilitado)
// ADVERTENCIA: Estas reglas son menos seguras, usar solo temporalmente

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for authentication and authorization
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // TEMPORAL: App Check deshabilitado para debugging
    function hasValidAppCheck() {
      return true; // Temporalmente permitir sin App Check
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.admin == true;
    }
    
    function isModerator() {
      return isAuthenticated() && 
             (request.auth.token.admin == true || request.auth.token.moderator == true);
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.token.email_verified == true;
    }
    
    function validateUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'displayName', 'createdAt']) &&
             data.email is string &&
             data.displayName is string &&
             data.createdAt is timestamp &&
             data.email == request.auth.token.email;
    }
    
    // User profiles - users can only read/write their own profile
    match /users/{userId} {
      allow read: if isAuthenticated() && 
                     hasValidAppCheck() &&
                     (isOwner(userId) || isAdmin());
      allow write: if isOwner(userId) && 
                      isValidUser() &&
                      hasValidAppCheck() &&
                      validateUserData();
      allow create: if isOwner(userId) && 
                       isAuthenticated() && // Relajado para permitir registro
                       hasValidAppCheck() &&
                       validateUserData();
      allow delete: if (isOwner(userId) || isAdmin()) && hasValidAppCheck();
      
      // User preferences subcollection
      match /preferences/{document=**} {
        allow read, write: if isOwner(userId) && hasValidAppCheck();
      }
      
      // User photos subcollection
      match /photos/{photoId} {
        allow read: if isAuthenticated() && hasValidAppCheck();
        allow write, create: if isOwner(userId) && hasValidAppCheck();
        allow delete: if (isOwner(userId) || isAdmin()) && hasValidAppCheck();
      }
    }
    
    // Chat messages - users can read/write messages in their chats
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && 
                            hasValidAppCheck() &&
                            (request.auth.uid in resource.data.participants ||
                             request.auth.uid in request.resource.data.participants);
      allow create: if isAuthenticated() && 
                       hasValidAppCheck() &&
                       request.auth.uid in request.resource.data.participants;
      
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
                       hasValidAppCheck() &&
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isAuthenticated() && 
                         hasValidAppCheck() &&
                         request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
                         request.resource.data.senderId == request.auth.uid;
      }
    }
    
    // Reports - authenticated users can create reports
    match /reports/{reportId} {
      allow create: if isAuthenticated() && hasValidAppCheck();
      allow read, write: if isAdmin() && hasValidAppCheck();
    }
    
    // Admin collections - only admins can access
    match /admin/{document=**} {
      allow read, write: if isAdmin() && hasValidAppCheck();
    }
    
    // Analytics - only system can write, admins can read
    match /analytics/{document=**} {
      allow read: if isAdmin() && hasValidAppCheck();
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}